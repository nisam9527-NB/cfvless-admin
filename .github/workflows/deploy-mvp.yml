name: Deploy to Cloudflare (MVP)

on:
  workflow_dispatch:
    inputs:
      env:
        description: "环境名（如 prod / staging）"
        required: true
        default: "prod"
      d1_name:
        description: "D1 数据库名（建议小写与下划线）"
        required: true
        default: "subscription-db"
      kv_binding:
        description: "KV 绑定名（需与 wrangler.toml 中 binding 一致）"
        required: true
        default: "subscription"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Wrangler
        run: npm i -g wrangler@3

      - name: Run Wrangler commands
        shell: bash
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -euo pipefail

          echo "==> Wrangler version"
          wrangler --version

            KV_BINDING="${{ inputs.kv_binding }}"
            D1_NAME="${{ inputs.d1_name }}"

          echo "==> Ensure KV namespace (${KV_BINDING})"
            # Try to find existing KV namespace id by binding name (best-effort)
            KV_ID=""
            if wrangler kv namespace list --output json --account-id "${CLOUDFLARE_ACCOUNT_ID}" >/tmp/kv_list.json 2>/dev/null; then
              KV_ID=$(node -e "const l=require('fs').readFileSync('/tmp/kv_list.json','utf8'); try{const a=JSON.parse(l); const m=a.find(x=>x.title&&x.title.endsWith(': '+process.env.KV_BINDING)); if(m) process.stdout.write(m.id);}" || true)
            fi
            if [ -z "${KV_ID}" ]; then
              # Create if missing
              # Some wrangler versions support --output json
              echo "Creating KV namespace..."
              wrangler kv namespace create ${KV_BINDING} --account-id "${CLOUDFLARE_ACCOUNT_ID}" >/tmp/kv_create.txt 2>&1 || true
              KV_ID=$(grep -Eo 'id\s*=\s*"[a-f0-9]{32}"' /tmp/kv_create.txt | head -1 | sed -E 's/.*"(.*)"/\1/' || true)
            fi
            echo "KV_ID=${KV_ID}"

          echo "==> Ensure D1 database (${D1_NAME})"
            D1_ID=""
            if wrangler d1 list --output json --account-id "${CLOUDFLARE_ACCOUNT_ID}" >/tmp/d1_list.json 2>/dev/null; then
              D1_ID=$(node -e "const l=require('fs').readFileSync('/tmp/d1_list.json','utf8'); try{const a=JSON.parse(l); const m=a.find(x=>x.name===process.env.D1_NAME); if(m) process.stdout.write(m.uuid||m.id||'');}" || true)
            fi
            if [ -z "${D1_ID}" ]; then
              echo "Creating D1 database..."
              wrangler d1 create ${D1_NAME} --account-id "${CLOUDFLARE_ACCOUNT_ID}" >/tmp/d1_create.txt 2>&1 || true
              D1_ID=$(grep -Eo 'uuid\s*:\s*[a-f0-9-]+' /tmp/d1_create.txt | head -1 | awk '{print $2}' || true)
              if [ -z "${D1_ID}" ]; then
                # Fallback parse json
                if wrangler d1 list --output json --account-id "${CLOUDFLARE_ACCOUNT_ID}" >/tmp/d1_list2.json 2>/dev/null; then
                  D1_ID=$(node -e "const l=require('fs').readFileSync('/tmp/d1_list2.json','utf8'); try{const a=JSON.parse(l); const m=a.find(x=>x.name===process.env.D1_NAME); if(m) process.stdout.write(m.uuid||m.id||'');}" || true)
                fi
              fi
            fi
            echo "D1_ID=${D1_ID}"

          echo "==> Prepare temporary wrangler config"
          cp wrangler.toml wrangler.merged.toml

            # Replace database_name and database_id in wrangler.merged.toml
            if grep -q '^\s*database_name\s*=\s*"' wrangler.merged.toml; then
              sed -i.bak "s/^\s*database_name\s*=\s*\".*\"/database_name = \"${D1_NAME}\"/" wrangler.merged.toml || true
            fi
            if grep -q '^\s*database_id\s*=\s*"' wrangler.merged.toml; then
              if [ -n "${D1_ID}" ]; then
                sed -i.bak "s/^\s*database_id\s*=\s*\".*\"/database_id = \"${D1_ID}\"/" wrangler.merged.toml || true
              else
                # remove database_id line if no id yet
                sed -i.bak "/^\s*database_id\s*=\s*\"/d" wrangler.merged.toml || true
              fi
            else
              # append if missing and we have id
              if [ -n "${D1_ID}" ]; then
                echo "database_id = \"${D1_ID}\"" >> wrangler.merged.toml
              fi
            fi

            # Replace KV namespace id if a placeholder exists; otherwise append a section
            if grep -q '^\s*\[\[kv_namespaces\]\]' wrangler.merged.toml; then
              # Try to replace id line under the binding
              if [ -n "${KV_ID}" ]; then
                # naive replace first id line
                if grep -q '^\s*id\s*=\s*"' wrangler.merged.toml; then
                  sed -i.bak "0,/^\s*id\s*=\s*\".*\"/s//id = \"${KV_ID}\"/" wrangler.merged.toml || true
                else
                  # append id just after kv_namespaces table
                  awk -v kv="${KV_ID}" 'BEGIN{p=0} {print $0; if($0 ~ /\[\[kv_namespaces\]\]/ && p==0){print "id = \"" kv "\""; p=1}}' wrangler.merged.toml > wrangler.tmp && mv wrangler.tmp wrangler.merged.toml
                fi
              fi
            else
              # Append a kv_namespaces table if missing
              if [ -n "${KV_ID}" ]; then
                printf "\n[[kv_namespaces]]\nbinding = \"%s\"\nid = \"%s\"\n" "${KV_BINDING}" "${KV_ID}" >> wrangler.merged.toml
              else
                printf "\n[[kv_namespaces]]\nbinding = \"%s\"\n" "${KV_BINDING}" >> wrangler.merged.toml
              fi
            fi

          echo "==> Show effective wrangler config"
          sed -e 's/\("database_id"\s*=\s*\)"[^"]*"/\1"***"/' -e 's/\("id"\s*=\s*\)"[^"]*"/\1"***"/' wrangler.merged.toml | sed -n '1,120p'

          echo "==> Apply D1 migrations (if any)"
          wrangler d1 migrations apply ${D1_NAME} --account-id "${CLOUDFLARE_ACCOUNT_ID}" || true

          echo "==> Publish Worker with merged config"
          wrangler publish --config wrangler.merged.toml --account-id "${CLOUDFLARE_ACCOUNT_ID}"
